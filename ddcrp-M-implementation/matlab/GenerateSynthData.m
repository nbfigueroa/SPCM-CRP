% Generate synthetic dataset of "type"={'square','stripes','face'} at a given
%   noise level "sig". Returns a dataset containing a connectivity
%   matrix D, and adjacency list adj_list, ground truth parcellation z, and
%   element coordinates coords
function [D adj_list z coords] = GenerateSynthData(type, sig)

sqrtN = 18;

coords = zeros(sqrtN^2,2);
adj_list = cell(sqrtN^2,1);
for r = 1:sqrtN
    for c = 1:sqrtN
        currVox = c + (r-1)*sqrtN;
        coords(currVox,:) = [r c];
        adj_list{currVox} = [];
        if (r > 1)
            adj_list{currVox} = [adj_list{currVox} (c+(r-2)*sqrtN)];
        end
        if (r < sqrtN)
            adj_list{currVox} = [adj_list{currVox} (c+r*sqrtN)];
        end
        if (c > 1)
            adj_list{currVox} = [adj_list{currVox} (c-1+(r-1)*sqrtN)];
        end
        if (c < sqrtN)
            adj_list{currVox} = [adj_list{currVox} (c+1+(r-1)*sqrtN)];
        end
    end
end

if (strcmp(type, 'square'))
    z = [ ...
     1 1 1 1 1 1 4 4 4 4 4 4 7 7 7 7 7 7 ...
     1 1 1 1 1 1 4 4 4 4 4 4 7 7 7 7 7 7 ...
     1 1 1 1 1 1 4 4 4 4 4 4 7 7 7 7 7 7 ...
     1 1 1 1 1 1 4 4 4 4 4 4 7 7 7 7 7 7 ...
     1 1 1 1 1 1 4 4 4 4 4 4 7 7 7 7 7 7 ...
     1 1 1 1 1 1 4 4 4 4 4 4 7 7 7 7 7 7 ...
     2 2 2 2 2 2 5 5 5 5 5 5 8 8 8 8 8 8 ...
     2 2 2 2 2 2 5 5 5 5 5 5 8 8 8 8 8 8 ...
     2 2 2 2 2 2 5 5 5 5 5 5 8 8 8 8 8 8 ...
     2 2 2 2 2 2 5 5 5 5 5 5 8 8 8 8 8 8 ...
     2 2 2 2 2 2 5 5 5 5 5 5 8 8 8 8 8 8 ...
     2 2 2 2 2 2 5 5 5 5 5 5 8 8 8 8 8 8 ...
     3 3 3 3 3 3 6 6 6 6 6 6 9 9 9 9 9 9 ...
     3 3 3 3 3 3 6 6 6 6 6 6 9 9 9 9 9 9 ...
     3 3 3 3 3 3 6 6 6 6 6 6 9 9 9 9 9 9 ...
     3 3 3 3 3 3 6 6 6 6 6 6 9 9 9 9 9 9 ...
     3 3 3 3 3 3 6 6 6 6 6 6 9 9 9 9 9 9 ...
     3 3 3 3 3 3 6 6 6 6 6 6 9 9 9 9 9 9];
elseif (strcmp(type, 'stripes'))
    z = [ ...
     1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...
     1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...
     1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...
     1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 ...
     1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 ...
     1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 ...
     1 1 1 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 ...
     1 1 1 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 ...
     1 1 1 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 ...
     1 1 1 2 2 2 3 3 3 4 4 4 4 4 4 4 4 4 ...
     1 1 1 2 2 2 3 3 3 4 4 4 4 4 4 4 4 4 ...
     1 1 1 2 2 2 3 3 3 4 4 4 4 4 4 4 4 4 ...
     1 1 1 2 2 2 3 3 3 4 4 4 5 5 5 5 5 5 ...
     1 1 1 2 2 2 3 3 3 4 4 4 5 5 5 5 5 5 ...
     1 1 1 2 2 2 3 3 3 4 4 4 5 5 5 5 5 5 ...
     1 1 1 2 2 2 3 3 3 4 4 4 5 5 5 6 6 6 ...
     1 1 1 2 2 2 3 3 3 4 4 4 5 5 5 6 6 6 ...
     1 1 1 2 2 2 3 3 3 4 4 4 5 5 5 6 6 6];
elseif (strcmp(type, 'face'))
    z = [ ...
     1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 ...
     1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 ...
     1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 ...
     1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 ...
     1 1 1 1 3 3 3 1 1 2 2 4 4 4 2 2 2 2 ...
     1 1 1 1 3 3 3 1 1 2 2 4 4 4 2 2 2 2 ...
     1 1 1 1 3 3 3 1 1 2 2 4 4 4 2 2 2 2 ...
     1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 ...
     1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 ...
     1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 ...
     1 1 1 5 5 1 1 1 1 2 2 2 2 5 5 2 2 2 ...
     1 1 1 5 5 1 1 1 1 2 2 2 2 5 5 2 2 2 ...
     1 1 1 5 5 5 5 5 5 5 5 5 5 5 5 2 2 2 ...
     1 1 1 5 5 5 5 5 5 5 5 5 5 5 5 2 2 2 ...
     1 1 1 5 5 5 5 5 5 5 5 5 5 5 5 2 2 2 ...
     1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 ...
     1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 ...
     1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2];
end


N = length(z);
K = length(unique(z));

A = randn(K,K);

D = zeros(N, N);
for v1 = 1:N
    for v2 = 1:N
        if (v1 ~= v2)
            D(v1,v2) = sig*randn(1) + A(z(v1),z(v2));
        end
    end
end

end